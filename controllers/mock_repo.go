// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/repo.go

// Package controllers is a generated GoMock package.
package controllers

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	models "website_sc/models"
)

// MockReposController is a mock of ReposController interface
type MockReposController struct {
	ctrl     *gomock.Controller
	recorder *MockReposControllerMockRecorder
}

// MockReposControllerMockRecorder is the mock recorder for MockReposController
type MockReposControllerMockRecorder struct {
	mock *MockReposController
}

// NewMockReposController creates a new mock instance
func NewMockReposController(ctrl *gomock.Controller) *MockReposController {
	mock := &MockReposController{ctrl: ctrl}
	mock.recorder = &MockReposControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReposController) EXPECT() *MockReposControllerMockRecorder {
	return m.recorder
}

// DatabaseGet mocks base method
func (m *MockReposController) DatabaseGet(url *models.Pingdom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseGet", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// DatabaseGet indicates an expected call of DatabaseGet
func (mr *MockReposControllerMockRecorder) DatabaseGet(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseGet", reflect.TypeOf((*MockReposController)(nil).DatabaseGet), url)
}

// DatabaseGets mocks base method
func (m *MockReposController) DatabaseGets(url *[]models.Pingdom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseGets", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// DatabaseGets indicates an expected call of DatabaseGets
func (mr *MockReposControllerMockRecorder) DatabaseGets(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseGets", reflect.TypeOf((*MockReposController)(nil).DatabaseGets), url)
}

// DatabaseSave mocks base method
func (m *MockReposController) DatabaseSave(url *models.Pingdom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseSave", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// DatabaseSave indicates an expected call of DatabaseSave
func (mr *MockReposControllerMockRecorder) DatabaseSave(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseSave", reflect.TypeOf((*MockReposController)(nil).DatabaseSave), url)
}

// DatabaseCreate mocks base method
func (m *MockReposController) DatabaseCreate(url *models.Pingdom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseCreate", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// DatabaseCreate indicates an expected call of DatabaseCreate
func (mr *MockReposControllerMockRecorder) DatabaseCreate(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseCreate", reflect.TypeOf((*MockReposController)(nil).DatabaseCreate), url)
}

// DatabaseDelete mocks base method
func (m *MockReposController) DatabaseDelete(url *models.Pingdom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseDelete", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// DatabaseDelete indicates an expected call of DatabaseDelete
func (mr *MockReposControllerMockRecorder) DatabaseDelete(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseDelete", reflect.TypeOf((*MockReposController)(nil).DatabaseDelete), url)
}
